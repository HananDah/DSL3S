[comment encoding = UTF-8 /]
[module varEnvironment('http://www.eclipse.org/uml2/3.0.0/UML')]
[import dsl3s::templates::services/]

[comment
Date: 09-08-2012    Author: LuÃ­s de Sousa  (luis.a.de.sousa@gmail.com)
Environment variable class.
/]

[template public environment(c : Class) ? (c.hasStereotype('Environment'))]

[file (c.name.concat('.java'), false, 'UTF-8')]

import ec.util.MersenneTwisterFast;
import sim.engine.SimState;
import sim.engine.Steppable;
import sim.engine.Stoppable;
import sim.util.geo.MasonGeometry;
import com.vividsolutions.jts.geom.Coordinate;

public class [c.name/] extends MasonGeometry implements Steppable, Stoppable {

	protected Double value = new Double([c.getTaggedValue(c, 'Environment', 'initValue')/]); 
	public static  Double stepVar = new Double([c.getTaggedValue(c, 'Environment', 'stepVariation')/]);
	public static  Double valueMax = new Double([c.getTaggedValue(c, 'Environment', 'maxValue')/]);
	public static  Double valueMin = new Double([c.getTaggedValue(c, 'Environment', 'minValue')/]);

	protected Coordinate location;
	public Coordinate getLocation() {return location;}
	
	public Double getValue() {return value;}
	public void setValue(Double newValue) {
		value = newValue;
		if (value > valueMax) value = valueMax;
		if (value < valueMin) value = valueMin;
	}
	
	public Double harvestPercent(Double percent) {
		Double harvested = value * percent / 100.0;
		setValue(value - harvested);
		return harvested;
	}
	public Double harvestValue(Double val) {
		Double res;
		if(val < value) res = val;
		else res = value;
		setValue(value - val);
		return res;
	}

	private Stoppable stopper = null;
    public void setStopper(Stoppable stopper) {this.stopper = stopper;}
    public void stop() {stopper.stop();}

	public [c.name/]() 
	{
		super();
		location = this.geometry.getCentroid().getCoordinate();
	}
	
	public [c.name/](Double init) 
	{
		super();
		location = this.geometry.getCentroid().getCoordinate();
		value = init;
	}

	public [c.name/](MersenneTwisterFast randGen) {
		value = randGen.nextDouble() * (valueMax - valueMin) + valueMin;
	}
	
	//@Override
	public void step(SimState state) { setValue(value + stepVar); }
	
	[comment Makes sense? Must rethink this. /]
	// This empty perish method facilitates things in the Animat Harvest process
	public void perish(Sim sim) {}

}

[/file]
[/template]