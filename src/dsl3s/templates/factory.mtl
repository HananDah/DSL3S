[comment encoding = UTF-8 /]
[module factory('http://www.eclipse.org/uml2/3.0.0/UML')]
[import dsl3s::templates::services/]

[comment
Date: 10-04-2013    Author: Lu√≠s de Sousa  (luis.a.de.sousa@gmail.com)
Generates a factory class contining methods to load spatial layers, creating
the respective environment spaces or animats.
/]

[template public factory(c : Class) ? (c.hasStereotype('Simulation'))]

[file ('Factory.java', false, 'UTF-8')]

import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URL;

import sim.engine.Schedule;
import sim.util.geo.MasonGeometry;
import sim.field.geo.GeomVectorField;
import sim.field.geo.GeomGridField;
import sim.field.geo.GeomGridField.GridDataType;
import sim.field.grid.DoubleGrid2D;
import sim.io.geo.ShapeFileImporter;
import sim.io.geo.ArcInfoASCGridImporter;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.Point;
import com.vividsolutions.jts.geom.Polygon;

public class Factory {

	protected static Boolean DEBUG = true;

	protected static GeometryFactory geomFactory = new GeometryFactory();

	protected static GeomVectorField loadVectorLayer(String filePath)
	{
		GeomVectorField layer = new GeomVectorField();

		try 
		{
			ShapeFileImporter.read(new URL("file://" + filePath), layer);
		} 
		catch (Exception ex)
		{ 
			System.out.println("Exception using ShapeFileImporter:");
			System.out.println("Message: " + ex.getMessage());
			System.out.println("Cause: " + ex.getCause());
			ex.printStackTrace(System.out);
			return null;
		}
		
		return layer;
	}

	protected static GeomGridField loadRasterLayer(String filePath)
	{
		GeomGridField gridField = new GeomGridField();

		try 
		{
			InputStream inputStream = new FileInputStream(filePath);
			ArcInfoASCGridImporter.read(inputStream, GridDataType.DOUBLE, gridField);
			return gridField;
		}
		catch (Exception ex)
		{ 
			if(DEBUG)
			{
				System.out.println("Exception using ArcInfoASCGridImporter:");
				System.out.println("Message: " + ex.getMessage());
				System.out.println("Cause: " + ex.getCause());
				ex.printStackTrace(System.out);
			}
			return null;
		}
	}

 [for (ass:Association | c.getAssociations())]
  [for (p:Property | ass.memberEnd) ]
   [if (p.class.isNotNull())]
	[if (p.class.hasStereotype('Environment'))]

	protected static GeomVectorField load[p.class.name/]FromLayer(String filePath, GeomVectorField space, Schedule schedule)
	{
		GeomVectorField layer = loadVectorLayer(filePath);
		
		// Import as vector
		if(layer != null)
		{
			for(Object geom : layer.getGeometries())
			{
				[p.class.name/] new[p.class.name/] = new [p.class.name/]((Geometry) geom);
				new[p.class.name/].setStopper(schedule.scheduleRepeating(new[p.class.name/]));
				space.addGeometry(new[p.class.name/]);
			}
			
		}
		//If import failed as a vector try with raster
		else 
		{
			System.out.println("Failed to load input layer for class [p.class.name/] as a vector, trying as raster.");
			GeomGridField rast = loadRasterLayer(filePath);

			if(rast == null) 
			{
				System.out.println("Failed to load input layer for class [p.class.name/] as raster. No data imported.");
				return null;
			}

			DoubleGrid2D grid = (DoubleGrid2D) rast.getGrid();
			for(int x = 0; x < rast.getWidth(); x++)
			for(int y = 0; y < rast.getHeight(); y++)
			{
				Polygon poly = rast.toPolygon(x, y);
				[p.class.name/] new[p.class.name/] = new [p.class.name/](grid.get(x, y), poly);
				new[p.class.name/].setStopper(schedule.scheduleRepeating(new[p.class.name/]));
				space.addGeometry(new[p.class.name/]);	
			}
		} 

		return layer;
	}
	[/if]
    [if (p.class.hasStereotype('Animat'))]

	public static void load[p.class.name/]FromLayer(String filePath, GeomVectorField space, Schedule schedule)
	{
[comment
This is a bit awkward. It might make more sense to have the Geometry as a 
property of the Animat class than to have the Animat class inheriting from the
MasonGeometry class.
Also, there's no need to create a second GeomVectorField object.
!!!!!!! Must pass the geometry itself, not the centroid !!!!!!!!!!!!!!!!!
/]
		GeomVectorField layer = loadVectorLayer(filePath);

		for(Object geom : layer.getGeometries())
		{
			Point centroid = ((MasonGeometry) geom).geometry.getCentroid();
			[p.class.name/] new[p.class.name/] = generate[p.class.name/](centroid.getX(), centroid.getY(), schedule);
			space.addGeometry(new[p.class.name/]);
		}
	}

	protected static [p.class.name/] generate[p.class.name/](double x, double y, Schedule schedule)
	{
		Coordinate coord = new Coordinate(new Double(x), new Double(y));
		Geometry geom = geomFactory.createPoint(coord);
		[p.class.name/] new[p.class.name/] = new [p.class.name/](geom);
		new[p.class.name/].setStopper(schedule.scheduleRepeating(new[p.class.name/]));
		return new[p.class.name/];
	}
    [/if]
   [/if]
  [/for]	 
 [/for]
}

[/file]

[/template]
