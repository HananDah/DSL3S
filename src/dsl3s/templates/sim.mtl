[comment encoding = UTF-8 /]
[module sim('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import dsl3s::templates::services/]
[comment
Date: 09-08-2012    Author: Lu√≠s de Sousa  (luis.a.de.sousa@gmail.com)
Generates the main Simulation class inheriting from SimState.
/]

[template public sim(c : Class) ? (c.hasStereotype('Simulation'))]

[file (c.name.concat('.java'), false, 'UTF-8')]
import sim.engine.SimState;
import sim.engine.Steppable;
import sim.engine.Stoppable;
import java.util.ArrayList;
import sim.util.geo.MasonGeometry;
import sim.field.geo.GeomVectorField;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;

public class [c.name/] extends SimState {

	//Simulation space
	public Integer spaceWidth = [c.getTaggedValue(c, 'Simulation', 'spaceWidth')/];
	public Integer spaceHeight = [c.getTaggedValue(c, 'Simulation', 'spaceHeight')/];
	public Double  widthInterval = 1.0; 
	public Double  heightInterval = 1.0;

	GeometryFactory geomFactory = new GeometryFactory();
	Envelope globalMBR;

[for (assA:Association | c.getAssociations())]
 [for (a:Element | assA.relatedElement) ]
  [let aClass: Class = a.oclAsType(Class)] 
  [if (aClass.isNotNull())]
   [if (aClass.hasStereotype('Animat'))]
    [if (aClass.getTaggedValue(aClass, 'Animat', 'initNum').isNotNull())]

	public Integer initNum[aClass.name/] = [aClass.getTaggedValue(aClass, 'Animat', 'initNum')/];
	[/if]
	[if (aClass.getTaggedValue(aClass, 'Animat', 'inputLayer').isNotNull())]
	public String inputLayer[aClass.name/] = "[aClass.getTaggedValue(aClass, 'Animat', 'inputLayer')/]";
	[/if]
	public GeomVectorField space[aClass.name/] = new GeomVectorField(spaceWidth, spaceHeight);

	protected ArrayList<MasonGeometry> garbage[aClass.name/] = new ArrayList<MasonGeometry>();
	public void addTo[aClass.name/]Garbage(MasonGeometry anim) {
		garbage[aClass.name/].add(anim);
	}
	protected void collect[aClass.name/]Garbage()  {
		for (MasonGeometry anim : garbage[aClass.name/]) {
			space[aClass.name/].removeGeometry(anim);
			((Stoppable) anim).stop();
		}
		garbage[aClass.name/] = new ArrayList<MasonGeometry>();
	}
   [/if]
   [if (aClass.hasStereotype('Environment'))]

	[if (aClass.getTaggedValue(aClass, 'Environment', 'inputLayer').isNotNull())]
	public String inputLayer[aClass.name/] = "[aClass.getTaggedValue(aClass, 'Environment', 'inputLayer')/]";
	[/if]
	public GeomVectorField space[aClass.name/] = new GeomVectorField(spaceWidth, spaceHeight);

   [/if]
  [/if]
  [/let]
 [/for]	 
[/for]

	// Lists for new animats
[for (assA:Association | c.getAssociations())]
 [for (a:Element | assA.relatedElement) ]
  [let aClass: Class = a.oclAsType(Class)] 
  [if (aClass.isNotNull())]
   [if (aClass.hasStereotype('Animat'))]
	protected ArrayList<[aClass.name/]> newAnimats[aClass.name/] = new ArrayList<[aClass.name/]>();
   [/if]
  [/if]
  [/let]
 [/for]	 
[/for]
	
	public Sim(long seed)
	{
		super(seed);
	}
	
	public void start()
	{
		super.start();

 [for (ass:Association | c.getAssociations())]
  [for (p:Property | ass.memberEnd) ]
   [if (p.class.isNotNull())]
    [if (p.class.hasStereotype('Animat'))]
		space[p.class.name/].clear();
    [/if]
   [/if]
  [/for]	 
 [/for]

[for (assA:Association | c.getAssociations())]
 [for (a:Element | assA.relatedElement) ]
  [let aClass: Class = a.oclAsType(Class)] 
  [if (aClass.isNotNull())]
   [if (aClass.hasStereotype('Environment'))]
	 [if (aClass.getTaggedValue(aClass, 'Environment', 'inputLayer').isNotNull())]
		Factory.load[aClass.name/]FromLayer(inputLayer[aClass.name/], space[aClass.name/], schedule);
		if(globalMBR == null) globalMBR = space[aClass.name/].getMBR();
		else globalMBR.expandToInclude(space[aClass.name/].getMBR());
     [/if]
	[/if]
    [if (aClass.hasStereotype('Animat'))]
     [if (aClass. getTaggedValue(aClass,  'Animat', 'inputLayer').isNotNull())]
		Factory.load[aClass.name/]FromLayer(inputLayer[aClass.name/], space[aClass.name/], schedule);
		if(globalMBR == null) globalMBR = space[aClass.name/].getMBR();
		else globalMBR.expandToInclude(space[aClass.name/].getMBR());
     [/if]
	[/if]
   [/if]
   [/let]
  [/for]	 
 [/for]

		/**
		 * . Update the space between environment cells
         * . init Animats with Double x,y
		 */
		if(globalMBR == null)
			globalMBR = new Envelope(0, 0, spaceWidth, spaceHeight);

		widthInterval = globalMBR.getWidth() / spaceWidth;
		heightInterval = globalMBR.getWidth() / spaceHeight;

 [for (ass:Association | c.getAssociations())]
  [for (p:Property | ass.memberEnd) ]
   [if (p.class.isNotNull())]
    [if (p.class.hasStereotype('Environment'))]
		space[p.class.name/].setMBR(globalMBR);
    [/if]
	[if (p.class.hasStereotype('Animat'))]
		space[p.class.name/].setMBR(globalMBR);
    [/if]
   [/if]
  [/for]	 
 [/for]

[for (assA:Association | c.getAssociations())]
 [for (a:Element | assA.relatedElement) ]
  [let aClass: Class = a.oclAsType(Class)] 
   [if (aClass.isNotNull())]
    [if (aClass.hasStereotype('Environment'))]
	 [if (aClass.getTaggedValue(aClass, 'Environment', 'inputLayer').isNull())]
		init[aClass.name/]Objects();

     [/if]
	[/if]
    [if (aClass.hasStereotype('Animat'))]
     [if (aClass.getTaggedValue(aClass, 'Animat', 'inputLayer').isNull())]
		for(int i = 0; i < initNum[aClass.name/]; i++)
			init[aClass.name/](
				globalMBR.getMinX() + random.nextDouble() * globalMBR.getWidth(),  
				globalMBR.getMinY() + random.nextDouble() * globalMBR.getHeight()); 

     [/if]
	 [if (aClass.hasLinkedStereotype('Emerge'))]
		createEmerge[aClass.name/]();	
	 [/if]
    [/if]
   [/if]
  [/let]
 [/for]	 
[/for]
		// Update spatial index at the start of each time step
		schedule.scheduleRepeating(new Steppable()
		{
			public void step(SimState state) 
			{ 
 [for (ass:Association | c.getAssociations())]
  [for (p:Property | ass.memberEnd) ]
   [if (p.class.isNotNull())]
    [if (p.class.hasStereotype('Animat'))]
				space[p.class.name/].updateSpatialIndex();
    [/if]
   [/if]
  [/for]	 
 [/for]
			}
		},-1,1);

		// Collect garbage at the end of each time step
		schedule.scheduleRepeating(schedule.EPOCH, 1, new Steppable()
		{
			public void step(SimState state) 
			{ 
 [for (ass:Association | c.getAssociations())]
  [for (p:Property | ass.memberEnd) ]
   [if (p.class.isNotNull())]
    [if (p.class.hasStereotype('Animat'))]
				collect[p.class.name/]Garbage();
				castNew[p.class.name/]();
    [/if]
   [/if]
  [/for]	 
 [/for]	
			}
		});
	}

 [for (ass:Association | c.getAssociations())]
  [for (p:Element | ass.relatedElement) ]
   [let pClass: Class = p.oclAsType(Class)]
    [if (pClass.isNotNull())]
     [if (pClass.hasStereotype('Environment'))]
	public void init[pClass.name/]Objects() {

		for (int i=0; i < spaceWidth; i++)
			for (int j=0; j < spaceHeight; j++)
			{
				Coordinate coord = new Coordinate(
					globalMBR.getMinX() + new Double(i) * widthInterval, 
					globalMBR.getMinY() + new Double(j) * heightInterval);
				Geometry geom = geomFactory.createPoint(coord);
			  [if (pClass.getTaggedValue(pClass, 'Environment', 'initRandom') = 'true')]
				[pClass.name/] obj = new [pClass.name/](random, geom);
			  [else]
				[pClass.name/] obj = new [pClass.name/](geom);
			  [/if]
				obj.setStopper(schedule.scheduleRepeating(obj));
				space[pClass.name/].addGeometry(obj);
			}
	}
     [/if]
    [/if]
   [/let]
  [/for]	 
 [/for]

 [for (ass:Association | c.getAssociations())]
  [for (p:Property | ass.memberEnd) ]
   [if (p.class.isNotNull())]
    [if (p.class.hasStereotype('Animat'))]

	protected void init[p.class.name/](double x, double y) 
	{
		[p.class.name/] new[p.class.name/] = Factory.generate[p.class.name/](x, y, schedule);
		space[p.class.name/].addGeometry(new[p.class.name/]);
	}

	public [p.class.name/] create[p.class.name/](double x, double y) 
	{
		[p.class.name/] new[p.class.name/] = Factory.generate[p.class.name/](x, y, schedule);
		newAnimats[p.class.name/].add(new[p.class.name/]);
		return new[p.class.name/];
	}

	protected void castNew[p.class.name/] () 
	{	
		for(int i = 0; i < newAnimats[p.class.name/].size(); i++) 
		{
			[p.class.name/] new[p.class.name/] = newAnimats[p.class.name/].get(i);
			space[p.class.name/].addGeometry(new[p.class.name/]);
		}
		newAnimats[p.class.name/] = new ArrayList<[p.class.name/]>();
	}

	 [if (p.class.hasLinkedStereotype('Emerge'))]
	public void createEmerge[p.class.name/]() {
		[p.class.name/]Emerge emerge = new [p.class.name/]Emerge();
		emerge.setStopper(schedule.scheduleRepeating(emerge));
	}
	 [/if]

    [/if]
   [/if]
  [/for]	 
 [/for]

}
[/file]
[/template]