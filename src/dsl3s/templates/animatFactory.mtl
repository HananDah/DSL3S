[comment encoding = UTF-8 /]
[module animatFactory('http://www.eclipse.org/uml2/3.0.0/UML')]
[import dsl3s::templates::services/]

[comment
Date: 10-04-2013    Author: Lu√≠s de Sousa  (luis.a.de.sousa@gmail.com)
Generates a factory class contining methods to load spatial layers, creating
the respective environment spaces or animats.
/]

[template public sim_gui(c : Class) ? (c.hasStereotype('Simulation'))]

[file ('AnimatFactory.java', false, 'UTF-8')]

import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URL;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.Point;
import com.vividsolutions.jts.geom.Polygon;

public AnimatFactory {

	protected static GeomVectorField loadAnimatLayer(String filePath)
	{
		GeomVectorField layer = new GeomGridField();

		try 
		{
			ShapeFileImporter.read(new URL(filePath), layer);
		} 
		catch (Exception ex)
		{ 
			System.out.println("Exception using ShapeFileImporter:");
			System.out.println("Message: " + ex.getMessage());
			System.out.println("Cause: " + ex.getCause());
			ex.printStackTrace(System.out);
			return null;
		}
		
		return layer;
	}

[comment
This is a bit awkward. It might make more sense to have the Geometry as a 
property of the Animat class than to have the Animat class inheriting from the
MasonGeometry class.
/]

	protected static void createPreyFromSpatialLayer(String filePath)
	{
		GeomVectorField layer = loadAnimatLayer(filePath);

		for(MasonGeometry geom : layer.getGeometries())
		{
			Point centroid = ((MasonGeometry) geom).geometry.getCentroid();
			Prey newPrey = generatePrey(x, y);
			spacePrey.addGeometry(newPrey);
		}
	}

	protected static Prey generatePrey(double x, double y)
	{
		Coordinate coord = new Coordinate(new Double(x), new Double(y));
		Geometry geom = geomFactory.createPoint(coord);
		Prey newPrey = new Prey(geom);
		newPrey.setStopper(schedule.scheduleRepeating(newPrey));
		return newPrey;
	}

	// Used to create a new animat at run time. It adds the new animat to the 
	// corresponding newAnimats list and not directly to the space object.
	public Prey createPrey(double x, double y) 
	{
		Prey newPrey = generatePrey(x, y);
		newAnimatsPrey.add(newPrey);
		return newPrey;
	}

}

[/file]

[/template]
