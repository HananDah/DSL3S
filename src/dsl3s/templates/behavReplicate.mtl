[comment encoding = UTF-8 /]
[module behavReplicate('http://www.eclipse.org/uml2/3.0.0/UML')]
[import dsl3s::templates::services/]

[comment
Date: 16-08-2012    Author: LuÃ­s de Sousa
Generates the Replicate function to be included in the Animat class.
It can generate some code replication, in case both the upper and lower 
thresholds of the Replicate stereotype are declared, but the code should be
also correct in that case.

Issues:
. It doesn't use the inheritance property yet;
/]

[template public behavReplicate(c : Class) ? (c.hasStereotype('Animat'))]

	public void replicate(Int2D location, Sim sim) {

[comment Iterate through linked States /]
[for (ass:Association | c.getAssociations())]
  [for (s:Element | ass.relatedElement) ]
  [let sClass: Class = s.oclAsType(Class)]
   [if (sClass.isNotNull())]
    [if (sClass.hasStereotype('State'))]
	[comment Iterate through linked Replicate /]
     [for (assR:Association | sClass.getAssociations())]
      [for (r:Element | assR.relatedElement) ]
	  [let rClass: Class = r.oclAsType(Class)]
       [if (rClass.isNotNull())]
        [if (rClass.hasStereotype('Replicate'))]
		 [if rClass.getTaggedValue(rClass, 'Replicate', 'upperThreshold').isNotNull()]
		if (state[sClass.name/] > upperThresh[rClass.name/]) {
			[c.name/] new[c.name/] = sim.create[c.name/]( 
					randMove(location.x, sim.random), 
					randMove(location.y, sim.random));
           [if rClass.getTaggedValue(rClass, 'Replicate', 'inheritance').isNotNull()]
			new[c.name/].setState[sClass.name/](inheritance[rClass.name/]);
           [/if]
			state[sClass.name/] -= toll[rClass.name/];
		}
		 [/if]
		[if rClass.getTaggedValue(rClass, 'Replicate', 'lowerThreshold').isNotNull()]
		if (state[sClass.name/] < lowerThresh[rClass.name/]) {
			[c.name/] new[c.name/] = sim.create[c.name/]( 
					randMove(location.x, sim.random), 
					randMove(location.y, sim.random));
		 [if rClass.getTaggedValue(rClass, 'Replicate', 'inheritance').isNotNull()]
			new[c.name/].setState[sClass.name/](inheritance[rClass.name/]);
         [/if]
			state[sClass.name/] -= toll[rClass.name/];
		}
		[/if]
       [/if]
      [/if]
     [/let]
     [/for]	 
    [/for] [comment Replicate/]
   [/if]
  [/if]
  [/let]
 [/for]	 
[/for] [comment States/]
	
	}

	public int randMove(int val, MersenneTwisterFast randGen) {
		return val + randGen.nextInt(2) - randGen.nextInt(2);
	}

[/template]